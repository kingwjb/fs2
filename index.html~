<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Flexible Storage System (FS2)</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="">

<link href="./google-code-prettify/prettify.css" type="text/css"
	rel="stylesheet" />

<!-- Le styles -->
<link href="./twitter-bootstrap-assets/css/bootstrap.css"
	rel="stylesheet">

<!-- github buttons -->

<link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css" 
   media="screen" />


<style type="text/css">
body {
	padding-top: 30px;
	padding-bottom: 20px;
}
</style>
<link href="./twitter-bootstrap-assets/css/bootstrap-responsive.css"
	rel="stylesheet">

<!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
      <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

<!-- Le fav and touch icons -->
<link rel="shortcut icon" href="images/favicon.ico">
<link rel="apple-touch-icon" href="images/apple-touch-icon.png">
<link rel="apple-touch-icon" sizes="72x72"
	href="images/apple-touch-icon-72x72.png">
<link rel="apple-touch-icon" sizes="114x114"
	href="images/apple-touch-icon-114x114.png">
</head>

<body onload="prettyPrint()">

	<div class="navbar navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container">
				<a class="btn btn-navbar" data-toggle="collapse"
					data-target=".nav-collapse"> <span class="icon-bar"></span> <span
					class="icon-bar"></span> <span class="icon-bar"></span>
				</a> <a class="brand" href="#">FS2</a>
				<div class="nav-collapse">
					<ul class="nav">
						<li class="active"><a href="#">Home</a></li>
						<li><a href="#about">About</a></li>
						<li><a href="#contact">Contact</a></li>
					</ul>
				</div>
				<!--/.nav-collapse -->
			</div>

		</div>
	</div>

	<div id="hero-container" class="container">

		  <div class="hero-unit">
			  
            <div class="pull-right">
		      <section id="downloads" class="clearfix">
                <a href="https://github.com/robertjchristian/fs2" id="view-on-github" class="button"><span>View on GitHub</span></a>
              </section>			
            </div>

			<h1>Flexible Storage System (FS2)</h1>
			<p>Store your data anywhere, and move it at any time, with no
				client code impact.</p>

			<img src="./fs2.png" />

			<p>
				<small>FS2 allows you to manage arbitrary data objects using
					familiar operations like create, read, update, and delete. Using a
					simple interface that abstracts the underlying persistence details,
					applications can interact with their data in a way similar to using
					a terminal to interact with a local filesystem. Behind the
					curtains, a storage provider does the heavy lifting, be it
					integrating with a cloud storage provider like Google Cloud Storage
					or Amazon S3, a Mongo NoSQL database, a fileshare, or even
					MemCache.</small>
			</p>
		</div>

	</div>

	<div class="container">

		<div class="row">
			<div class="span4">
				<h2>Features at a glance</h2>
				<ul>
					<li>Create, Read, Update, Delete data objects without
						persistence-layer awareness</li>
					<li>Hierarchical arrangement of objects, and list
						functionality with Regular Expression filters</li>
					<li>Use object literals (JSON) to represent configuration and
						object metadata</li>
					<li>High level abstraction for data migration and backup</li>
					<li>Stream-based api</li>
				</ul>
			</div>
			<div class="span5">
				<h2>Uses</h2>
				<ul>
					<li>Anywhere you need to store and manage data objects</li>
					<li>Use fs2 as a replacement for the native Java File API or
						Apache Fileutils for filesystem manipulation.</li>
					<li>Share large data objects between appliances within a SOA
						environment by URI reference, downloading payloads only when
						necessary.</li>
					<li>Move easily from public to private clouds as your needs
						change</li>
					<li>Chain several storage providers for data duplication and
						redundancy</li>
					<li>As a lightweight alternative to jsr170-1.0 implementations such as Apache Jackrabbit.</li>	
				</ul>
			</div>

			<div class="span3">
				<h2>Roadmap</h2>
				<ul>
					<li>Complete prioritized <a href="#">todos</a></li>
					<li>Complete MongoDB implementation</li>
					<li>Add compression and encryption functionality</li>
					<li>Front with a RESTFul webservice</li>
					<li>Add security features</li>
					<li>Integrate with the boto project so that users can access
						fs2 from a terminal</li>
				</ul>
			</div>

		</div>

		<div class="container">

			<div class="alert alert-info">Tip: Achieve a tighter
				development cycle by storing data in memory or on the file system in
				early development and unit testing, and move to a storage provider
				or local data center nearer to deployment time.</div>
		</div>
		<div class="container">


			<div class="row">
				<div class="span12">
					<h2>Why FS2?</h2>

					<p>
There are similar technologies out there such as Apache Commons Virtual File System (VFS) and Apache Jackrabbit.  FS2 distinguishes itself with the following:
<ul>
<li>FS2 Objects are relatively simple, having a URI, headers, and a blob.  This makes it a natural fit to map and handle web requests.</li>
<li>Storage-agnostic API.  Client code does not know about the underlying persistence store.  For example, a VFS URL make look like jar:/a/b, where fs2 is simply fs2:/a/b/.</li>
<li>TDD friendly.  Use the default FS2 repo (in-memory) while developing for easy testing without minding the complexities of database/filesystem stores.  Then when the code is ready for prime time, simply flip a switch (ie change "mem" to "mongo"), and objects will be persisted.</li>
<li>Lightweight dependencies.  The core FS2 API code is lightweight, and for any given deployment scenario, you need only to include the concrete repository that will be used.</li>
<li>Built-in tests.  It's easy to have confidence in a new concrete repository implementation when you can plug it right into an existing test framework.</li>
<li>Less config.  By default, FS2 stores objects in memory, and there is zero configuration required.</li>
<li>Easier config.  FS2 is not going to require heaps of XML files defining factories in order to work.  Just override the default values you wish to change, in code or by providing a properties file in json format.</li>
<li>Leaves the typical "heavyweightness" of Java frameworks behind.  IE uses json for config and object descriptors, relies on default values so the only existing configuration is override configuration.</li>
</ul></p></div></div>

			<div class="row">
				<div class="span12">
					<h2>Interacting with the API</h2>



					<p>FS2 decouples meta-information like object size, date
						created, compression, etc from the object itself. The most common
						meta-data. such as date created, is modeled within the meta class.
						Extended attributes are contained in unmodeled key value pairs
						called headers. Client code can interact with the FS2 api using
						the meta object, or URI. Here is a simple CRUD example.</p>

					<h3>Basic Crud</h3>
					<pre class="prettyprint">
// get an instance of fs2 with default properties
FlexibleStorageSystem FS2 = FS2Factory.newInstance();

// create the object.  initially this object will have no data associated with it, just a name and some initial metadata.
FS2ObjectMeta foo = FS2.createObjectEntry("/foo");
    
// add a custom header field to object foo
FS2.addHeader(foo, "isText", "true");
    
// add some contents to foo
InputStream is = new ByteArrayInputStream("hello world".getBytes());
FS2.writePayloadFromStream(foo, is);
    
// delete
FS2.delete(foo);</pre>

					<p>FS2 also supports the hierarchical arrangement of objects,
						like you would see in a filesystem, or any tree like data
						structure.
					<ul>
						<li>In the code below, we create four distinct objects, all
							belonging to a tree with root /foo
							<ul>
								<li>This is a convenience method, and objects can just as
									easily be created one by one.</li>
								<li>The nodes are created in order of the parameter list.</li>
								<li>Any nodes in a path that do not previously exist will
									be created implicitly.</li>
								<li>If a specified node pre-exists, an exception will be
									thrown.
									<ul>
										<li>For example, if the first two parameters below were
											switched, create "/foo" will fail since it was implicitly
											created when create "/foo/bar" was executed.</li>
									</ul>
								</li>
								<li>The (meta) objects that were <em>explicitly</em>
									created will be returned by the method.
								</li>
							</ul>
						</li>
						<li>Then we get the reference to bar's metadata by accessing
							the returned array.
							<ul>
								<li>Alternatively, we can access bar by providing its uri
									directly to FS2. Note this means an additional fetch.</li>
							</ul>
						</li>
						<li>Children and descendants can be listed with or without
							regular expression filters.</li>
						<li>To delete a node with children, use deleteRecursive() or
							an exception will be thrown.</li>

					</ul>

					<h3>Working with trees</h3>
					<pre class="prettyprint">
// create five nodes
FS2ObjectMeta[] nodes = FS2.createObjectEntries("/foo", "/foo/bar", "/foo/baz", "/foo/bar/bam", "/foo/bar/moo");

// can access meta like this
FS2ObjectMeta foo = nodes[0];
FS2ObjectMeta bar = nodes[1];

// sanity check a node exists by refetching from fs2.  note bar2 should equal() bar unless another thread updated (ie) headers in between create and fetch  
FS2ObjectMeta bar2 = FS2.fetchObject("/foo/bar");

// list descendants of foo who's names begin with "m" (expect moo) 
FS2.listDescendants(foo, "*/m.*");
    
// delete bar and bar/bam
FS2.deleteRecursive(bar);

// get foo's remaining descendants.  (expect just baz)
FS2.listDescendants(nodes[0]);</pre>

				</div>

			</div>

			<div id="migration" class="row">
				<div class="span12">
					<h2>Data migration</h2>
					<p>Migrating from one storage provider to another can be done
						with just a few lines of code. It requires obtaining two instances
						of fs2, one for each provider, and making a move call. Below is an
						example of migrating from the file storage provider to a
						Mongo-backed storage provider.</p>
					<pre class="prettyprint linenums">
// copy all contents from the file repo to mongoDB
FlexibleStorageSystem fileRepo = FS2Factory.newInstance("file"); // override default and force an instance backed by the "file" storage provider
FlexibleStorageSystem mongoRepo = FS2Factory.newInstance("mongo"); // override default and force an instance backed by the "mongo" storage provider
fileRepo.copyTo(mongoRepo);</pre>
					<em>Note the monikers used to create instances of fs2. These
						are mapped to fqn's in a property set used by fs2 at bootstrap.
						Configuration properties can be extended to map any number of fs2
						storage provider implementations. Out of the box, file and mem are
						the only two that are always configured.</em>
				</div>
			</div>

		</div>
	</div>
	<!-- container -->

	<footer></footer>

	<!-- /container -->

	<!-- Le javascript
    ================================================== -->
	<!-- Placed at the end of the document so the pages load faster -->
	<script src="./google-code-prettify/prettify.js" type="text/javascript"></script>

	<script src="./twitter-bootstrap-assets/js/jquery.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-transition.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-alert.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-modal.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-dropdown.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-scrollspy.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-tab.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-tooltip.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-popover.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-button.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-collapse.js"
		type="text/javascript"></script>
	<script src="./twitter-bootstrap-assets/js/bootstrap-typeahead.js"
		type="text/javascript"></script>
</body>
</html>
